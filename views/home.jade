extends layouts/global

block head2
  link(rel='stylesheet', href='http://fonts.googleapis.com/css?family=Rambla:400,700|Source+Sans+Pro:400,600')

block content
  #content
    nav
      .wrapper
        h1.logo Borg Documentation
        ul.right
          li
            a(href='https://github.com/mikesmullin/borg') Github
          li.toc
            a(href='#') Docs
          li
            a(href='#') Contribute
          li
            a(href='#') Credits
        .clear

    header
      .wrapper
        h2 Borg Documentation (v#{version})
        p
          | This information is designed to make you immediately productive with 
          strong: a(href="https://www.npmjs.com/package/borg") Borg v#{borg_version}
          | .
          br
          | When additional versions are released, previous versions will be linked here.
          br
          | Let&rsquo;s get started!

    article
      .wrapper
        h2 1. Getting Started
        h3
          | 1.1. Install 
          a(href="http://nodejs.org") Node.JS
          |  (using 
          a(href="https://github.com/creationix/nvm") NVM 
          | is recommended)
        pre: code
          | curl https://raw.github.com/creationix/nvm/master/install.sh | sh
          | nvm install #{node_version} # latest stable preferred
          | nvm use #{node_version}
          | nvm alias default #{node_version}

        h3
          | 1.2. Install 
          a(href="https://github.com/mikesmullin/borg") Borg
        pre: code
          | npm install borg -g

        h3 1.3. Generate a New Project
        pre: code
          | borg init Devops
          | cd Devops/
        p
          | Or, clone an 
          a(href="https://github.com/mikesmullin/borg-sample-project") existing
          |  one.

        h3 1.4. Explore Help
        pre: code
          | borg help

        h2 2. Cloud Integration
        p
          | Though abstracted to integrate with any cloud provider,
          | only 
          a(href="http://aws.amazon.com/") Amazon Web Services
          |  integration is implemented at present.

        h3 2.1. Amazon Web Services
        p This integration depends on the AWS CLI utility being installed:
        pre: code
          | cd /tmp
          | wget https://s3.amazonaws.com/aws-cli/awscli-bundle.zip
          | unzip awscli-bundle.zip
          | sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
          | aws --version # test
        p and configured:
        pre: code
          | aws configure
          | Access Key ID: your-aws-access-key-id
          | Secret Access Key: your-aws-secret-key
        p
          | For more information, please see:
          br
          a(href="http://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/set-up-ec2-cli-linux.html") Setting Up the Amazon EC2 Command Line Interface Tools


        h2 3. Introduction

        h3 3.1. Vernacular
        ul
          li
            strong script: 
            | file containing code listing steps to complete orchestration.
            br
            br
          li 
            strong resource: 
            | named function organizing common steps for reuse across multiple scripts; often with the secondary goal of becoming os agnostic.
            br
            br
          li 
            strong server: 
            | file containing code defining how remote machines are named and addressed, and which scripts must be applied in order to complete their orchestration.
            br
            br
          li 
            strong attribute: 
            | server variable; representing static data, dynamic runtime calculation functions, or personal preferences/overrides for use by scripts at runtime.
            br
            br
          li 
            strong networks.coffee: 
            | file containing a list of servers and their attributes--as well as the relationship of one server to another in a hierarchy of datacenters, groups, server types, and server instances.
            br
            br
          li 
            strong datacenter: 
            | the outermost unit available for the grouping of reusable server definitions (e.g., one datacenter may contain two or more instances of the same server)
            br
            br
          li 
            strong group: 
            | another unit available for the grouping of servers; typically named after the environment and project (e.g., a datacenter may contain a group for the production environment of project A as well as the staging environment for project B, both of which contain separate instances of the same type of server)
            br
            br
          li 
            strong borg create: 
            | to provision a new empty remote server via cloud provider apis.
            br
            br
          li 
            strong borg assimilate: 
            | to orchestrate a remote server.
            br
            br
          li 
            strong borg assemble: 
            | to both 
            code create
            |  and then 
            code assimilate
            | .
            br
            br

        h3 3.2. Directory structure
        pre: code
          | attributes/		JSON and CSON files; see 
          a(href="#") Attributes
          |  chapter below
          |   networks.coffee	your datacenter and server hierarchy
          |   memory.json		remembers details from cloud provider api interactions
          | scripts/		your Scripts; see 
          a(href="#") Scripts
          |  chapter below
          |   server/		code defining which Servers use which Scripts
          |   vendor/		third-party Scripts as Git submodules



        h2 4. Attributes
        p
          | Attribute files are regular 
          a(href="http://coffeescript.org") CoffeeScript
          |  files, appropriately suffixed 
          code .coffee
          | , but some of them might more effectively thought of as 
          strong
            | CoffeeScript Object Notation (
            a(href="https://github.com/bevry/cson") CSON
            | )
          | ; a variation of 
          a(href="http://www.json.org/") JSON
          |  that allows you to, among other things, make use of 
          a(href="http://coffeescript.org/#strings") comments
          | , 
          a(href="http://coffeescript.org/#strings") string interpolation
          | , 
          a(href="http://coffeescript.org/#literals") function values
          | , and conditional logic such as 
          a(href="http://coffeescript.org/#conditionals") ternary
          |  and 
          a(href="http://coffeescript.org/#switch") switch statements
          | . This features make it a more versatile alternative to 
          a(href="http://www.yaml.org/") YAML
          | .
        p
          | It is recommended to take advantage of these features to achieve,
          | as close as possible, the overall goal of 
          strong
            a(href="http://en.wikipedia.org/wiki/Don%27t_repeat_yourself") DRY
            |  (Don’t Repeat Yourself)
          |  and readability. Strive to simplify the job of an
          | application maintainer who will only want to look in a single place
          | to change any attribute value generated by the devops scripts.
        p
          | There are times when it is appropriate for an attribute to be 
          | defined in more than one place. Borg knows which value to use 
          | in these cases because it merges attribute files in a specific 
          | order at runtime. For example, your attribute definitions will 
          | override any defaults provided by third-party submodules. 
        p
          | The resulting attribute values are accessible to all scripts 
          | from within the 
          code @server
          |  variable, which is also pretty printed 
          | to the debug log at the beginning of each run.

        h3 4.1. Attribute Precedence
        p
          | Although it may seem straightforward, when making changes its 
          | important to be sure any changes to attribute values won’t be 
          | accidentally overridden. To help illustrate both the various 
          | locations where attributes can be defined, and the order that 
          | they get merged to produce the final result, we’ve assembled 
          | the handy chart below, in order of precedence:
        table
          thead: tr
            th Name, Location, Precendence
            th Description
          tbody
            tr
              td
                p
                  strong 1. Hard-coded
                  br
                  | scripts/*/*.coffee
                  br
                  | scripts/*/templates/*/*.coffee
                  br
                  em (un-overridable precedence)
                p
                  | Always scrutinize whether there are values in
                  | your scripts which would be more useful as attributes
                  | that others can see and modify.
              td
                p
                  strong Purpose:
                  br
                  | Define local variables which remain
                  | private to only one script and its templates.
                p
                  | Calculations, for example, may be based on a combination
                  | of attributes defined elsewhere--such as in a
                  | concatenation operation, or a hashing operation, or any
                  | kind of last-minute reformatting.
                p
                  strong Convention:
                  br
                  | Defining constants or overriding attributes within the
                  | template code itself is discouraged, because its
                  | difficult for other users to change these and remain
                  | compatible with your upstream. The only exception is
                  | when a script author is certain the resulting output is
                  | unlikely to be a desired change.
                p
                  | As it happens, most scripts end up 100% hard-coded as
                  | a convenience for authors in a hurry to get testing and building
                  | servers. However, these aren't useful for sharing publicly
                  | until all values are abstracted as overridable attributes.

            tr
              td
                p
                  strong
                    | 2. CLI 
                    code --locals=
                    |  Attributes
                  br
                  | Process arg w/ CSON value
                  br
                  em (high precedence)
              td
                p
                  strong Purpose:
                  br
                  | Define short-term instance attribute values unique to this run.
                p
                  strong Convention:
                  br
                  | Commonly these are one-time values that are expected to change
                  | by the end of a successful run.
                p
                  | For example, if a script was expected to change the sshd listen
                  | port, but aborted due to an  error before that step was reached,
                  | you may want to override that setting temporarily until you are
                  | done debugging and retrying.
                  br
                  | (e.g., 
                  code ssh: port:
                  | , 
                  code user:
                  | , 
                  code pass:
                  | , 
                  code key:
                  | )

            tr
              td
                p
                  strong 3. Global Attributes
                  br
                  | attributes/networks.coffee
                  br
                  | in the 
                  code global:
                  |  key
              td
                p
                  strong Purpose:
                  br
                  | Define long-term instance attribute default values in the most general way possible.
                p
                  strong Convention:
                  br
                  | Rarely useful for global user preferences.
                  br
                  | (e.g., 
                  code ssh: port
                  |  or 
                  code tz:
                  | )

            tr
              td
                p
                  strong 4. Datacenter Attributes
                  br
                  | attributes/networks.coffee
                  br
                  | in the 
                  code datacenters:
                  |  key
              td
                p
                  strong Purpose:
                  br
                  | Define long-term attribute values per-datacenter,
                  | per-environment, per-group, per-type, and/or per-instance.
                p
                  strong Convention:
                  br
                  | Perhaps the most commonly used area to specify attributes
                  | of any.
                p
                  | Details information specific to an instance, such as 
                  | the AWS AMI, instance size, region id, zone, security group,
                  | as well as information used by scripts, such as
                  | memory settings, the number of instances to create in
                  | each datacenter, and how they are grouped. (e.g., by environment)
                p
                  | Also provides individual scripts with hierarchical graph of
                  | all defined systems in the local and extended network,
                  | represented by the 
                  code @networks
                  |  variable, which is intended to be useful when dynamically
                  | configuring firewall, monitoring, whitelists or other lists
                  | that need to access relational information about servers other
                  | than the one currently assimliating.


            tr
              td
                p
                  strong 5. Server Attributes
                  br
                  | scripts/servers/*.coffee
                  br
                  | within the exported function 
                  code assimilate: ->
                p
                  | Usually there is at least one of these files for each type
                  | of server.
              td
                p
                  strong Purpose:
                  br
                  | Default attributes unique to servers of one type.
                p
                  | These files also define the order that scripts are 
                  | executed to complete assimilation of the machine.
                p
                  strong Convention:
                  br
                  | For example, a set of attribute values shared by servers 
                  | "web01", "web02", ... "web09"
                  | could all be defined once in a file called 
                  code scripts/servers/web.coffee


            tr
              td
                p
                  strong 6. Script Attributes
                  br
                  | scripts/*/attributes/*/*.coffee
              td
                p
                  strong Purpose:
                  br
                  | The most appropriate place for a script author to declare
                  | all script attributes and set default values which can
                  | be later overridden, because it is packaged together with
                  | the script when shared.
                p
                  | Also the best place to look first for a list of attributes
                  | you can override if you are a new user of a third-party
                  | script.
                p
                  strong Convention:
                  br
                  | It is recommended to define defaults for all script
                  | attributes so the user only has to define overriding values
                  | to address unusual cases.


            tr
              td
                p
                  strong 7. Memory Attributes
                  br
                  | attributes/memory.json
                  br
                  em (lowest precedence)
                p
                  | Users should avoid modifying this file directly.
              td
                p
                  strong Purpose:
                  br
                  | Data remembered by Borg after successfully interacting with 
                  | the cloud provider API.
                p
                  strong Convention:
                  br
                  | Great for things you don’t want to have to constantly insert
                  | into an attribute file manually; things Borg can figure out
                  | on its own, or that can only be figured out during/after a
                  | run.
                p
                  | These are commonly used when automatically 
                  | connecting to a newly made server, or deleting an existing 
                  | server.
                  br
                  | (e.g., 
                  code @server.instance_id
                  | , 
                  code @server.public_ip
                  | )

        h3 4.2. Cascading Attributes
        p
          | This next section applies specifically only to the 
          code ./attributes/networks.coffee
          |  file. The goal with this file is to create an object hierarchy like: 
          code datacenters: D1: groups: G1: servers: S1: instances: I1: PROPERTY: VALUE
          |  where ALL-CAPS keys are names you would invent.
          | This hierarchy of 
          strong cascading attributes
          |  (like 
          a(href="https://developer.mozilla.org/en-US/docs/Web/CSS") cascading style sheets
          | )
          | allow the most generic definitions at the root (least 
          a(href="http://www.smashingmagazine.com/2007/07/27/css-specificity-things-you-should-know/") specificity
          | )
          | to be inherited all the way down to the most specific definitions in
          | the deepest leaves (most specificity; in this case, 
          code I1
          | ) to define the network.
        p
          | Observe how the keys are then inherited by instances 
          | through a 
          a(href="https://lodash.com/docs#merge")
            code _.merge()
          |  to create the final fully-detailed 
          | instance-level leaves a.k.a. the final object representing all 
          | the keys attributed to a specific server instance. In order of 
          | lowest to highest precedence:
        ol
          li: code global.*
          li
            code datacenters.*.*
            |  (except key: 
            code groups
            | )
          li
            code datacenters.*.groups.*.*
            |  (except key: 
            code servers
            | )
          li
            code datacenters.*.groups.*.servers.*.*
            |  (except key: 
            code instances
            | )
          li
            code datacenters.*.groups.*.servers.*.instances.*.*

        h3 4.3. @networks object
        p: strong A 
          code networks.coffee
          |  structure like:
        pre: code
          | global:
          |   ssh_port: 3562
          | datacenters:
          |   aws-ca:
          |     provider: 'aws'
          |     groups:
          |       'prod-myproject':
          |          env: 'prod'
          |          tld: '.myproject.tld'
          |          servers:
          |            'myapp':
          |              aws_size: 't2.micro'
          |              instances:
          |                '01':
          |                  aws_size: 'm3.xlarge'
          |                  secondary_ip: '1.2.3.4'
          |                '02':
          |                  secondary_ip: '1.2.3.5'

        p: strong Will be merged into a 
          code @networks
          |  object, in scope from within scripts:
        pre: code
          | @networks.datacenters['aws-ca'].groups['prod-myproject'].servers['my-app'].instances['01'] =
          |   aws_size: 'm3.xlarge'
          |   secondary_ip: '1.2.3.4'
          |   env: 'prod'
          |   tld: '.myproject.tld'
          |   provider: 'aws'
          |   ssh_port: 3562

          | @networks.datacenters['aws-ca'].groups['prod-myproject'].servers['my-app'].instances['02'] =
          |   aws_size: 't2.micro'
          |   secondary_ip: '1.2.3.5'
          |   env: 'prod'
          |   tld: '.myproject.tld'
          |   provider: 'aws'
          |   ssh_port: 3562

        p
          | So our script can now reach attributes for all servers, and it can
          | lookup attributes by their relationship to other servers in the
          | network hierarchy. (e.g., what is the secondary_ip of each my-app
          | server in the same datacenter and group as the current server?)

        h3 4.4. @server object
        p
          | But there is also a shortcut to the current server’s attributes--
          | which in the above case, if we pretend the current server is my-app02, 
          | would be:
        pre: code
          | @server =
          |   aws_size: 't2.micro'
          |   secondary_ip: '1.2.3.5'
          |   env: 'prod'
          |   tld: '.myproject.tld'
          |   provider: 'aws'
          |   ssh_port: 3562


        h2 4.5. Attribute Functions
        p
          | Notice you can define function values which are [re-]evaluated
          | (as a 
          a(href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get")
            | javascript getter
          | )
          | at runtime every time they are referenced,
          | and have access to the 
          code @server
          |  object within the function.
        p
          | For example, we can use this to 
          | dynamically reference other attributes, like so:
        pre: code
          | global:
          |   aws_security_groups: -> [ @server.env +’-’+ @server.type ]
        p
          | We love that we can take this type of data-as-code approach, 
          | and its one of the most compelling
          | reasons why we prefer a javascript-based devops solution.

        h2 4.6. Calculated Attributes
        p
          | Finally, some attributes are calculated and appended for you by 
          | Borg at runtime, even though you didn’t specify them anywhere. 
          | These can be based on parts of the server name 
          | (e.g., 
          code @server.type
          | , 
          code @server.id
          | , 
          code @server.subproject
          | , 
          code @server.env
          | , 
          code @server.tld
          | , 
          code @server.fqdn
          | ) or position in the hierarchy (e.g., 
          code @server.datacenter
          | , 
          code @server.group
          | ).






        h2 3. Contributing
        p Your contributions are welcome via Github.com.

        h3 3.1. Issuing a Pull Request
        ol
          li
            p
              | fork and clone 
              a(href='https://github.com/mikesmullin/borg') https://github.com/mikesmullin/borg
          li edit to heart&rsquo;s content
          li
            p publish to your fork:
            pre: code git commit && git push
          li issue pull request to official fork, and we will review and approve or provide feedback.

    aside
      .wrapper
        .content
          h3 Chapters
          ol
            li
              a(href='#') Getting Started
              ul
                li: a(href='#') Install Node.JS
                li: a(href='#') Install Borg
                li: a(href='#') Generate a New Project
                li: a(href='#') Explore Help
            li
              a(href='#') Cloud Integration
              ul
                li: a(href='#') Amazon Web Services
            li
              a(href='#') Introduction
              ul
                li: a(href='#') Vernacular
                li: a(href='#') Directory structure
            li
              a(href='#') Attributes
              ul
                li: a(href='#') Attribute Precedence
                li: a(href='#') Cascading Attributes
                li: a(href='#') @networks object
                li: a(href='#') @server object
                li: a(href='#') Attribute Functions
                li: a(href='#') Calculated Attributes
            li
              a(href='#') Contributing
              ul
                li: a(href='#') Issuing a Pull Request

    footer
      .wrapper
        p
          | This documentation is licensed 
          a(href='http://creativecommons.org/licenses/by-sa/3.0/') Creative Commons Attribution-Share Alike 3.0
        p
          | "Borg" is a service mark of 
          a(href="http://smullindesign.com") Smullin Design
          | .
